.data
	mainMenuMessage: .asciiz "Press 1 to create your own array, 2 to choose from a selection of arrays, or 0 to exit: "
    	array_msg: .asciiz "Enter the size of the array: "
    	new_line: .asciiz "\n"
    	inputError: .asciiz "Error: Invalid input. Please enter a number between 1 and 3."
    	
	array1: .word 1, 2, 3, 4
	array2: .word 5, 6, 7, 8
	array3: .word 9, 10, 11, 12

	prompt: .asciiz "Enter a number between 1 and 3: "
	result: .asciiz "You selected array: "
	
.text
.globl main

main:
    # Prompt the user to create their own array
    li $v0, 4
    la $a0, mainMenuMessage
    syscall

    # Read the user's input
    li $v0, 5
    syscall

    # Save the input to $t0
    move $t0, $v0

    # Create the array if the user enters 1
    beq $t0, 1, create_array

    # Choose from a selection of arrays if the user enters 2
    beq $t0, 2, choose_array

    # Exit the program if the user enters 0
    bnez $t0, exit

create_array:
    # Prompt the user to enter the size of the array
    li $v0, 4
    la $a0, array_msg
    syscall

    # Read the user's input
    li $v0, 5
    syscall

    # Save the size to $t1
    move $t1, $v0

    # Create the array using sbrk
    li $a0, 4
    mul $a0, $a0, $t1
    li $v0, 9
    syscall

    # Store the address of the array to $t2
    move $t2, $v0

    # Print a new_line character
    li $v0, 4
    la $a0, new_line
    syscall
    
    # Exit the program
    li $v0, 10
    syscall

choose_array:
    # Prompt the user to enter a number
    li $v0, 4
    la $a0, prompt
    syscall

    # Get the user's input
    li $v0, 5
    syscall

    # Store the user's input in $t0
    move $t0, $v0

    # Display the result
    li $v0, 4
    la $a0, result
    syscall

    # Create a conditional statement based on the user's input
    beq $t0, 1, print_array1
    beq $t0, 2, print_array2
    beq $t0, 3, print_array3

    # If the user enters a number outside the range, print an error message
    li $v0, 4
    la $a0, new_line
    syscall
    li $v0, 4
    la $a0, inputError
    syscall
    li $v0, 4
    la $a0, new_line
    syscall

    # Exit the program
    li $v0, 10
    syscall

print_array1:
    la $a1, array1
    la $a0, new_line
    j print_array
    

print_array2:
    la $a1, array2
    la $a0, new_line
    j print_array
 

print_array3:
    la $a1, array3
    la $a0, new_line

print_array:
    # Print the array elements
    li $t1, 0
    li $t2, 4		

print_loop:
    lw $a0, 0($a1)
    li $v0, 1
    syscall

    addi $a1, $a1, 4
    addi $t1, $t1, 1

    blt $t1, $t2, print_loop

    # Print a new_line and exit the program
    li $v0, 4
    la $a0, new_line
    syscall

    li $v0, 10
    syscall

exit:
    # Exit the program
    li $v0, 10
    syscall

